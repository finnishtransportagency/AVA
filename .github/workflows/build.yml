# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: AVA - Build and create a release

on:
  push:
    branches:
      - 'feature/AVAPALJU-110-gha'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup node.js 
      uses: actions/setup-node@v3
      with:
        node-version: '14.x'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install

    - name: Run tests
      if: ${{false}}
      run: yarn test  

    - name: Create a release tag
      if: ${{false}}
      # if: always() # run this even if tests fail
      run: |
        echo "RELEASE_TAG=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

    - name: Get previous release
      uses: "actions/github-script@v6"
      with:
        script: |
          try {
            const prevRel = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const prevTag = prevRel.tag_name;

            const releaseNotes = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_TAG,
              previous_tag_name: prevTag
            });

            
          } catch (error) {
            core.setFailed(error.message);
          }


    - name: "Create a release"
      if: ${{false}}
      uses: "actions/github-script@v6"
      with:
        script: |
          try {
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_TAG,
              target_commitish: context.ref
            });
          } catch (error) {
            core.setFailed(error.message);
          }
